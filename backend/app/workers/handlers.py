from __future__ import annotations

import asyncio
from typing import Any, Iterable

from app.services.job_service import JobExecutionContext

_STEP_DELAY_SECONDS = 0.25


async def _run_steps(context: JobExecutionContext, steps: Iterable[tuple[float, str]]) -> None:
    for progress, message in steps:
        await context.progress(progress, message=message)
        await asyncio.sleep(_STEP_DELAY_SECONDS)


async def ingest_handler(context: JobExecutionContext) -> dict[str, Any]:
    await context.log("Validating ingest request", payload=context.payload)
    await _run_steps(
        context,
        [
            (10.0, "Validating source media"),
            (35.0, "Copying media to staging"),
            (60.0, "Extracting technical metadata"),
            (85.0, "Registering asset in catalog"),
        ],
    )
    await context.log("Ingest processing complete")
    return {
        "asset_id": context.payload.get("asset_id"),
        "checksum": context.payload.get("checksum"),
        "notes": "Ingest pipeline completed",
    }


async def scene_detection_handler(context: JobExecutionContext) -> dict[str, Any]:
    await context.log("Initialising scene detection pipeline")
    await _run_steps(
        context,
        [
            (15.0, "Loading analysis profile"),
            (40.0, "Sampling frames"),
            (70.0, "Detecting hard cuts"),
            (90.0, "Scoring scene relevance"),
        ],
    )
    await context.log("Scene detection completed")
    scenes = [
        {"timestamp": index * 5, "confidence": 0.92} for index in range(1, 4)
    ]
    return {"scenes": scenes}


async def transcription_handler(context: JobExecutionContext) -> dict[str, Any]:
    await context.log("Preparing transcription request")
    await _run_steps(
        context,
        [
            (20.0, "Uploading audio to speech service"),
            (55.0, "Transcribing audio"),
            (80.0, "Aligning word timestamps"),
        ],
    )
    await context.log("Transcription complete")
    transcript = "This is a placeholder transcript generated by the async worker."
    return {"transcript": transcript, "language": context.payload.get("language", "en")}


async def export_handler(context: JobExecutionContext) -> dict[str, Any]:
    await context.log("Starting export job")
    await _run_steps(
        context,
        [
            (20.0, "Composing timeline"),
            (45.0, "Rendering video"),
            (65.0, "Muxing audio"),
            (90.0, "Finalizing package"),
        ],
    )
    await context.log("Export finished")
    return {
        "output_path": context.payload.get("output_path", "exports/output.mp4"),
        "format": context.payload.get("format", "mp4"),
    }
